<?php

/**
 * PullLog API
 * ガチャ履歴管理アプリ「PullLog」バックエンドAPI仕様
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\Api\AuthController;
use App\Http\Controllers\Api\DefaultController;

Route::prefix(config('api.base_uri', 'v1'))->group(function () {

    // ダミールート（APIの動作確認用）
    Route::get('/dummy', function (Request $request) {
        $cookie = $request->headers->get('cookie', '');
        return response()->json([
            'message' => 'PullLog API is running successfully.',
            'status' => 'success',
            'cookie' => $cookie,
            'timestamp' => now()->toIso8601String(),
        ]);
    })->withoutMiddleware(['auth.apikey', 'auth.csrf'])
      ->name('api.dummy');

    // ここから OpenAPI スキーマから生成したルート定義 `generated/routes.php` をマージ:

    // /auth/** 系（APIキー認証のみ）
    Route::prefix('auth')
        ->middleware(['auth.apikey']) // 独自APIキー認証ミドルウェア
        ->group(function () {
            // 認証関連のルート
            Route::post('autologin', [AuthController::class, 'autologin'])->name('auth.autologin');
            Route::post('login',     [AuthController::class, 'login'])->name('auth.login');
            Route::post('logout',    [AuthController::class, 'logout'])->name('auth.logout');
            Route::post('password',  [AuthController::class, 'requestPasswordReset'])->name('auth.password.request');
            Route::put( 'password',  [AuthController::class, 'resetPassword'])->name('auth.password.reset');
            Route::post('register',  [AuthController::class, 'register'])->name('auth.register');
            Route::post('verify',    [AuthController::class, 'verifyEmail'])->name('auth.verify');
        });

    // その他（APIキー認証+CSRFトークン認証が必要）
    Route::middleware(['auth.apikey', 'auth.csrf'])
        ->group(function () {
            // アプリ関連のルート
            Route::prefix('apps')->group(function () {
                Route::get(   '/',        [DefaultController::class, 'appsGet'])->name('default.apps.get');
                Route::post(  '/',        [DefaultController::class, 'appsPost'])->name('default.apps.post');
                Route::get(   '/{appId}', [DefaultController::class, 'appsAppIdGet'])->name('default.apps.app.id.get');
                Route::put(   '/{appId}', [DefaultController::class, 'appsAppIdPut'])->name('default.apps.app.id.put');
                Route::delete('/{appId}', [DefaultController::class, 'appsAppIdDelete'])->name('default.apps.app.id.delete');
            });

            // ログ関連のルート
            Route::prefix('logs')->group(function () {
                Route::get(   '/{appId}',              [DefaultController::class, 'logsAppIdGet'])->name('default.logs.app.id.get');
                Route::delete('/daily/{appId}/{date}', [DefaultController::class, 'logsDailyAppIdDateDelete'])->name('default.logs.daily.app.id.date.delete');
                Route::get(   '/daily/{appId}/{date}', [DefaultController::class, 'logsDailyAppIdDateGet'])->name('default.logs.daily.app.id.date.get');
                Route::post(  '/daily/{appId}/{date}', [DefaultController::class, 'logsDailyAppIdDatePost'])->name('default.logs.daily.app.id.date.post');
                Route::put(   '/daily/{appId}/{date}', [DefaultController::class, 'logsDailyAppIdDatePut'])->name('default.logs.daily.app.id.date.put');
                Route::post(  '/import/{appId}',       [DefaultController::class, 'logsImportAppIdPost'])->name('default.logs.import.app.id.post');
            });

            // 統計関連のルート
            Route::get('/stats/{appId}', [DefaultController::class, 'statsAppIdGet'])->name('default.stats.app.id.get');

            // ユーザー関連のルート
            Route::put('/user/update', [DefaultController::class, 'userUpdatePut'])->name('default.user.update.put');
        });

});
